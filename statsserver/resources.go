// Code generated by go-bindata.
// sources:
// ../Website/stats.html
// DO NOT EDIT!

package statsserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _statsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x58\x6d\x73\xdb\xb8\x11\xfe\x9e\x99\xfc\x87\x3d\x5e\x3b\x94\xc7\x22\x29\x2b\xb9\x4e\x2b\x8b\xee\xa4\xbe\xf4\xe2\x8e\x2f\xb9\xc6\x4e\x5f\xc6\xd5\x07\x88\x5c\x91\x90\x41\x80\x01\x96\xa2\x1d\x8f\xff\x7b\x07\x20\x25\x51\x32\x6d\xc7\xa7\xf1\x8c\x44\x70\xf7\x79\x76\xb1\x8b\xc5\xae\xa7\x3f\xfc\xfc\xe9\xf4\xf2\xbf\xbf\xbd\x87\x9c\x0a\x71\xf2\xfa\xd5\x74\xf3\x8d\x2c\x3d\x79\xfd\x0a\x00\x60\x5a\x20\x31\x48\x72\xa6\x0d\x52\xec\x55\xb4\x08\xfe\xec\xad\xdf\x11\x27\x81\x27\x45\x62\x88\x51\x65\x0c\xea\x15\x6a\x08\xe0\x82\x18\x71\x43\x3c\x31\xd3\xa8\x11\xe9\x62\x49\x56\x60\xec\xa5\x68\x12\xcd\x4b\xe2\x4a\x7a\x90\x28\x49\x28\x29\xf6\x2e\x73\x04\xb3\xd6\x06\xc3\x09\x61\xa1\x34\x50\x8e\xf0\x8b\x12\x4c\x66\x90\x6a\xbe\x42\x09\xbb\x9c\xe1\xc6\xa2\x1f\x82\xe0\xac\x28\x95\x26\xf8\x45\xa9\x4c\x20\x9c\x25\x4a\xc2\xdf\x95\xa4\x20\x58\xcb\x08\x2e\xaf\x21\xd7\xb8\x88\xbd\x9c\xa8\x34\x93\x28\x5a\x28\x49\x26\xcc\x9c\x0a\x2b\xb9\x09\x13\x55\x44\x3c\x51\xf2\xaf\x0b\x56\x70\x71\x1b\xff\xca\x08\x35\x67\xe2\xd0\xe2\x19\x0f\x34\x8a\xd8\x33\x74\x2b\xd0\xe4\x88\xd4\xc3\x5f\xb4\x1a\xfc\x1b\x86\x89\x31\x7b\xf4\x74\x5b\x62\xec\x11\xde\x50\x94\x98\x1e\xbc\x46\xb6\xf9\xec\x9a\x9a\xa4\x72\x69\xc2\x44\xa8\x2a\x5d\x08\xa6\xd1\x99\xca\x96\xec\x26\x12\x7c\x6e\xa2\x0e\x6d\x34\x0a\x8f\x46\xa3\x70\x6c\x19\xba\xeb\x61\xc1\xa5\x35\x69\x87\xa4\xc0\x94\xb3\xd8\x33\x89\x46\x94\xc3\x52\xab\x25\x26\x2e\x38\xd1\xc9\xeb\x57\x5b\xe7\xce\x91\x60\xae\x55\x6d\x50\xc3\xb5\x54\x35\xd4\x38\x77\x61\xe2\x06\x54\x49\xbc\xe0\xdf\x30\x75\x31\x2b\xd4\x9c\x0b\xdc\xba\xdd\x89\xfd\x8a\x63\x6d\xf7\xa8\x13\xf8\x9a\xa7\x94\xc7\x29\xae\x78\x82\x81\x7b\x18\x02\x97\x9c\x38\x13\x81\x49\x98\xc0\xf8\x28\x1c\x75\x6d\x69\xb2\xa7\xbb\x8f\x4b\xb6\x62\xcd\xaa\x07\x46\x27\xdb\x1d\xab\xeb\x3a\xcc\x5c\x56\x25\x6e\xb3\x6c\x32\x93\x89\x84\x62\x29\xea\x70\x69\xbc\x93\x69\xd4\x28\x9e\x7c\x0f\xf8\x49\x93\x26\x61\x03\x13\x5a\x98\x81\x9f\x54\x5a\xa3\x24\x7f\x08\x77\x7e\xc9\x92\x6b\x96\xa1\xf1\x27\x70\xe5\x0b\x2e\xd1\x9f\xdd\x1f\x1c\x37\xd0\xbb\xba\x06\xe9\x93\x3c\x57\x2c\x3d\x65\x42\xcc\x59\x72\x3d\x58\x54\xd2\x6d\x3b\x0c\x0e\xe0\x6e\x1b\x9f\x3f\x84\x36\xc2\x83\xbb\x6e\xc4\x00\x2a\x2d\x26\xe0\x47\xd6\x35\x13\x59\x56\x24\xe3\x0f\xc1\x54\x49\x82\xc6\x4c\x60\x0b\x96\x32\x62\x3b\x80\xeb\xcf\x8a\x69\xb0\xe1\x84\x18\xae\xac\x50\x28\x50\x66\x94\xcf\x8e\x1f\x8a\xda\xa0\x0e\xac\x3c\x87\x18\x46\xc7\xc0\x61\x0a\x1d\x95\x63\xe0\x87\x87\xbd\x1c\x6b\x9e\x94\x11\x5e\x94\x82\x13\xc4\x4e\xf1\x8a\xcf\xc2\x5c\x55\xfa\x67\x46\x18\x1a\xfb\x62\xe0\x05\xde\x41\x0f\xf5\x1a\xa1\x95\x66\xd6\xda\x37\x7d\x36\xba\xe3\xd2\x0a\x5d\x8d\x66\x10\x83\xc4\x1a\x2c\xc1\xc0\xb1\x7c\xb9\x3c\x1d\x94\xb6\x94\x9d\x49\x1a\x6c\xec\xb9\x1a\xcd\x0e\x86\xd0\xb3\x7e\x34\x3b\x80\x00\x8e\x7a\xdf\x8d\x1f\xd1\x79\x63\xd7\x47\xcd\xdf\xc1\x63\xce\x6c\x6c\x3c\x9a\x75\x36\xa3\xe4\x32\x3b\x55\x95\xa4\xe7\xb4\xc6\x5d\x2d\xa1\x32\x2e\x9f\x52\xb3\xf1\xbd\xe2\x56\x65\x0d\xd0\x23\x78\xff\x70\x29\xd5\xac\x3e\xb5\x89\x3a\xb0\x08\xfb\xae\xdc\x0f\x01\xb5\x56\xba\x9b\x66\xcb\xaf\xff\xf9\xf0\x79\x08\x78\x93\xa0\xab\xec\xbd\xe9\xc0\x04\x6a\x1a\xd8\x52\xaf\x11\x6a\x66\x80\xc9\x06\x09\xea\x9c\x0b\x84\x0c\x89\xb8\xcc\x5c\xd1\x6f\x8f\xd5\xf6\x4e\x30\x21\x5c\x20\xda\xba\x61\x94\x40\x50\x15\x95\x15\xb5\xf5\x46\x23\xa4\x48\x8c\x0b\x13\xf6\x66\x91\xcd\xa0\xc2\x64\x10\x83\xef\xf7\xbc\xe6\x8b\xd6\x81\xb0\xb9\x5a\x20\x8e\x63\x18\x3d\x9a\xd1\x2d\xd2\x47\x45\xd6\x1a\x89\x09\x85\xf0\x2f\xd4\x7c\x71\x0b\x1f\x91\x6a\xa5\xaf\xc3\x3e\x96\x7b\x40\x61\xb0\x9f\xec\xed\xe8\xed\x73\x74\x9f\xf1\x6b\x85\x86\x30\x85\x92\x65\x08\x52\x59\xe7\x2b\x99\x86\x70\xf5\x76\xf4\x76\xf6\x52\xc6\x9f\x46\xcf\x3a\x78\x26\x09\xb5\x64\x02\x2e\x9a\xeb\xfd\xbd\x0b\xd5\xd5\x4f\xa3\xd1\xec\x39\x07\x37\x79\xe0\xb8\x7c\x77\x58\xb4\x0b\xb5\xff\xfd\x7e\xfe\xe3\xe2\xd3\xc7\xe6\x9c\xc1\x82\x71\x81\xe9\x0b\x59\x89\x17\xa8\x2a\x7a\x96\xf1\x92\x17\x2e\x9f\x9a\x5c\x7c\x21\x09\x9b\x2b\xfd\x3c\xc5\xbb\x25\xbb\x01\xdd\x78\x06\x4e\xe5\x69\x6f\x9e\x46\xfb\x22\x13\x56\x65\x39\x35\x11\x09\xff\x27\x7d\x38\x84\x26\xc2\x1a\x4d\xa9\xa4\xc1\x4b\xbc\xe9\x2b\x0a\x3d\x67\xbd\x3d\x50\xb6\x98\xfc\xee\xa3\x39\x01\x0f\x0e\xad\x75\x0f\x4a\xc5\xf6\x71\x73\x11\xba\x1f\xcd\xcf\x4d\xfd\xd8\x2b\x38\x5d\xff\xdb\xfb\x83\xb5\x15\xbd\xbd\x46\x57\xdc\x54\xb6\xa5\x61\x56\x3d\xb4\x95\xed\x92\xcd\x05\x0e\xba\x06\xb8\x2b\x8a\xa5\xe9\xa9\x12\x55\x21\x07\xbe\xad\xd4\xfe\x10\xfc\x0f\xaa\xd2\xfe\x53\x82\xb2\x2a\xe6\xa8\xad\x68\x9b\xf9\xe7\xdc\x10\xfc\xc6\x65\x66\xbe\x53\xef\xdc\x56\x66\x60\x44\x58\x94\xd4\xaf\xf4\x59\xd5\xe6\x41\x79\xb5\xce\x2a\x97\x5d\xf6\x5e\xde\xcb\x82\xfc\xdd\x0d\x37\x13\xb8\x5b\x28\x5d\x30\x9a\x80\xff\xe1\xc3\xa4\x28\xfc\x21\xd8\xae\xea\xdf\x5c\xa6\xaa\xfe\x55\xa5\x38\x01\xbf\xd4\x48\x74\xeb\xdf\x0f\x77\x01\x5c\xef\x31\x81\x3b\xd7\x99\x4f\xc0\x7f\x27\x41\xad\x50\x5b\x75\x9b\x94\x15\xb9\xf0\x6a\x4c\x90\xaf\x5c\x9d\x71\x7d\x05\x70\xe9\xd6\x05\x33\x04\x0b\xac\xdd\x5d\x62\x42\xbf\x1b\xdb\x3d\x17\x1c\xd1\x6e\xc0\xda\xbe\xe7\x9c\x4b\x1c\xa4\x2a\xa9\x0a\x94\x14\x66\x48\xef\x05\xda\x9f\x7f\xbb\x3d\x4b\x07\x7e\xd3\xd3\x07\x82\x1b\x0a\xec\x95\x68\x02\xa7\xe6\xef\xdc\xa6\x6e\x29\xb4\x19\xe3\x9a\x9b\x61\x0f\x43\x98\x28\xb9\x42\x4d\x9f\x9a\xad\x1c\xb4\x5b\xba\x81\x69\x4d\xef\x34\x7f\xd3\xa8\x9d\x7c\x5e\xbf\x9a\xce\x55\x7a\x6b\x97\x24\x5b\xad\xdb\xc2\x94\xaf\x20\x11\xcc\x98\xd8\x93\x6c\x15\xd4\x9a\x95\x25\x6a\x0f\x5c\xdf\x1e\x7b\xb6\x81\xcb\xb4\xad\xc6\x41\xa2\x84\xbd\x19\x7f\x1c\xff\xe5\x4f\xe3\xc5\xe2\x78\x3d\x1e\x38\x14\xd6\x36\xf4\x3f\x7a\x6b\xb0\xb9\x66\x32\x0d\x84\xca\x14\x24\x68\xcb\xad\xb7\x37\x53\x4d\x23\xd6\x45\xa8\x04\xf0\xb4\xb1\xa1\xe9\xb2\x37\x48\x02\x17\x04\x39\x4f\x31\x50\x32\x28\x30\x0d\x2c\x70\xaa\x6a\xb9\x63\x41\x54\x89\xb5\x4b\x51\xca\x57\xce\xf1\xc6\xcd\xae\x8b\xb6\x37\x67\x5c\x5a\x6b\x1e\xfa\xaf\x55\xbd\x03\xb9\xa3\x27\xc0\x1c\x8d\xbb\xaf\x9d\x48\x3e\x5e\x4b\xd8\x4d\xb6\xb0\xdd\x39\x31\x1f\xef\xcb\x77\x21\x99\x4e\x21\x57\x9a\x7f\xb3\x36\x89\x7d\xe8\x3e\xf1\xc0\x90\x4d\xdc\xb4\x4f\xb6\x57\xbe\x1d\x45\x1e\x93\xdf\xe8\xd8\x9d\x7f\x24\x43\x37\x99\xe0\x06\x98\x09\x1c\x8d\x46\x7f\x3c\x86\x1c\x79\x96\xd3\xc4\xde\xb5\xe5\xcd\xb1\x1d\x36\x9a\x3d\xef\x65\x78\xe4\x5d\xdf\xfa\xfe\x5a\xf7\x79\x1b\xd7\xf6\x7b\x3b\x97\x2e\xff\x59\xa1\xbe\x85\x39\x2e\x6c\xc3\xd4\x1d\x0b\x97\xcd\x90\xfa\x92\xd1\xea\x99\x61\x74\xf9\xd5\x72\x45\x6f\xc2\x71\x78\xd4\x3e\xb8\xe1\x73\x6f\xe6\x7a\x9a\x71\xeb\xe1\x4b\xa8\xfb\xe6\xe0\xe5\xc3\x31\x78\xdf\x92\x68\x7d\xec\xa3\xf6\x7f\x21\xff\x0f\x00\x00\xff\xff\xca\xa9\x78\x40\x25\x11\x00\x00")

func statsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_statsHtml,
		"stats.html",
	)
}

func statsHtml() (*asset, error) {
	bytes, err := statsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stats.html", size: 4389, mode: os.FileMode(438), modTime: time.Unix(1510331132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stats.html": statsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"stats.html": &bintree{statsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

