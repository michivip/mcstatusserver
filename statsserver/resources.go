// Code generated by go-bindata.
// sources:
// ../Website/stats.html
// DO NOT EDIT!

package statsserver

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _statsHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x71\x6f\xdb\xba\x11\xff\x2a\x37\xbd\x0d\xb2\x11\x5b\x52\xdc\x76\xd8\x2c\xcb\x43\x97\x57\xac\x1d\xba\xf6\xa1\xc9\x1b\x36\x78\xfe\x83\x21\xcf\x12\x5d\x8a\x54\xc9\x93\x95\x3c\xc3\xdf\x7d\x20\x25\x3b\x4e\x5e\xf2\xde\x36\x0c\x30\x04\xf3\x8e\xf7\xbb\xe3\xef\x8e\xc7\x5b\xfc\xe6\xfb\xcf\x57\x37\xff\xfc\xe1\x1d\x54\x54\xab\xe5\x62\xf8\x22\x13\x4b\x58\xd4\x48\x0c\x78\xc5\xac\x43\x2a\xa2\x96\x36\xd3\x3f\x44\x4b\x58\x90\x24\x85\xcb\x9a\x3b\x62\xd4\x3a\x87\x76\x87\x16\xa6\x70\x4d\x8c\xa4\x23\xc9\xdd\x22\xed\xb7\x0c\x08\x9a\xd5\x58\x44\x02\x1d\xb7\xb2\x21\x69\x74\x04\xdc\x68\x42\x4d\x45\x74\x53\x21\xb8\xa3\x21\x38\x49\x08\x1b\x63\x81\x2a\x84\xbf\x18\xc5\x74\x09\xc2\xca\x1d\x6a\x78\xec\x2e\xf1\x71\x28\xa9\xbf\x42\x65\x71\x53\x44\x15\x51\xe3\xe6\x69\xba\x31\x9a\x5c\x52\x1a\x53\x2a\x64\x8d\x74\x09\x37\x75\x2a\xb9\xd1\x7f\xda\xb0\x5a\xaa\xfb\xe2\x6f\x8c\xd0\x4a\xa6\x2e\x3e\x70\xa3\x5d\x04\x16\x55\x11\x39\xba\x57\xe8\x2a\x44\x3a\xc1\xd2\x7d\x83\x45\x44\x78\x47\x29\x77\xcf\xec\x7b\xe2\x97\x0b\xbd\x75\x09\x57\xa6\x15\x1b\xc5\x2c\x06\xbf\x6c\xcb\xee\x52\x25\x6f\x5d\x5a\x0f\x5e\xe5\x4f\x98\x66\xc9\x65\x96\x25\x33\x0f\x7b\x2e\x4f\x6a\xa9\x93\xe0\xaa\x46\x21\x59\x11\x39\x6e\x11\xf5\xa4\xb1\x66\x8b\x3c\xb0\x96\x3e\x26\x74\x27\xb1\x6b\x8c\xa5\x33\x36\x3b\x29\xa8\x2a\x04\xee\x24\xc7\x69\x58\x4c\x40\x6a\x49\x92\xa9\xa9\xe3\x4c\x61\x71\x99\x64\x01\xa7\xcf\xc5\xf9\x31\xb7\x6c\xc7\x7a\x69\x04\xce\xf2\x87\xb3\x75\x5d\x97\x94\x21\x47\x3c\x1c\xcb\x17\x04\xb9\x54\x19\x26\xd0\x26\x5b\x17\x2d\x17\x69\x6f\xf8\x6b\xb8\xcb\x3e\x31\x49\x8f\x90\x78\x84\x51\xcc\x5b\x6b\x51\x53\x3c\xd9\xc7\x0d\xe3\x5f\x59\x89\x2e\x9e\xc3\x2a\x56\x52\x63\xbc\x3e\x8c\x73\x78\x6c\xe5\x90\x3e\xeb\x8f\x86\x89\x2b\xa6\xd4\x2d\xe3\x5f\x47\x9b\x56\x07\x82\x60\x34\xde\xff\x36\xf1\xac\x8f\xf6\xad\x55\x73\x88\x53\x1f\xb6\x4b\x3d\x2e\x92\x8b\x27\xe0\x5a\xce\xd1\xb9\x39\x3c\xd8\x08\x46\x6c\xbc\xdf\x31\x0b\xd6\x74\xae\x58\xf9\x75\xa2\x50\x97\x54\xad\xf3\x50\x8c\x23\xaf\x94\x45\x96\x83\x84\x05\x9c\xe9\x73\x90\x17\x17\xbd\xad\x60\x84\xd7\x8d\x92\x54\x78\xfd\x4a\xae\x93\xca\xb4\xf6\x7b\x46\x98\x38\x2f\x1e\x45\xd3\x68\x9c\x83\xdf\x3a\x28\x58\xb1\x7a\xb5\xce\x4f\xab\x55\xb6\x2e\x34\x76\xe0\x4d\x46\xc1\xee\xc7\x9b\xab\x51\xe3\xef\xde\x07\x4d\xa3\x13\xfe\x2a\x5b\x8f\x27\xf0\x8c\xfc\x72\x3d\x86\x29\x5c\x3e\xab\x9b\xbd\x60\xf3\xca\xcb\xb3\xfe\x37\x1e\x9f\x05\x73\xb9\x3e\x9d\xa3\x91\xba\xbc\x32\xad\xa6\x33\xf5\xec\x41\xad\x4c\x29\xf5\xa0\xf7\x04\xae\xe4\xba\x38\xee\xcb\x0f\xc2\xb2\xee\xca\xe7\x6d\xe4\x75\xe3\xc3\x04\xd0\x5a\x63\xcf\xf9\xdf\x7e\xfb\xc7\xfb\x2f\x13\xc0\x3b\x8e\xa1\x39\x8c\xf7\x4c\xa1\xa5\x91\x6f\x0d\x16\xa1\x63\x0e\x98\xee\xcd\xa0\xab\xa4\x42\x28\x91\x48\xea\x32\x34\x89\xa1\x7a\x1e\x7a\x88\x4b\xe0\x1a\xd1\x5f\x09\x67\x14\x82\x69\xa9\x69\x29\xa4\xb1\x36\x16\x41\x20\x31\xa9\x5c\x72\x4c\x46\xed\xca\x22\x8e\x73\x90\x9b\x21\x92\xa4\x6f\x33\x45\x51\x64\xe3\x7d\xd0\x7e\x32\xe4\xe1\x34\x72\x4a\xe0\xef\x68\xe5\xe6\x1e\x3e\x21\x75\xc6\x7e\x4d\xe2\xfc\x80\xca\xe1\x73\xe6\xaf\xb3\xd7\x03\xc0\x17\xfc\xd6\xa2\x23\x14\xd0\xb0\x12\x41\x1b\x1f\x4f\xab\x45\x02\xab\xd7\xd9\xeb\xf5\x2f\x60\xbc\xc9\x8e\x41\x7c\xd0\x84\x56\x33\x05\xd7\x7d\xbb\x7d\x17\xf8\x58\xbd\xc9\xb2\xf5\xa3\x20\x4e\x34\x16\x45\x11\x87\x8c\xdb\x40\x5d\xfc\xb3\x58\xfe\x7a\xfd\xf9\x53\x5f\x13\xb0\x61\x52\xa1\x78\x19\x87\x64\x8d\xa6\xa5\x23\xc6\x8d\xac\x03\xb1\x7d\x52\x5e\x36\x63\xb7\xc6\x9e\x8c\xde\x6e\xd9\x1d\xd8\xde\x3b\x04\xcd\x83\xc7\x7e\xc7\x8f\x9a\xb3\xb6\xac\xa8\x3f\x5b\xf2\x2f\x1d\xc3\x05\xf4\x84\x58\x74\x8d\xd1\x0e\x6f\xf0\x8e\xf2\xc3\x90\x5b\x5f\x7a\xff\x73\x95\xcc\x21\x82\x0b\x9f\xfd\x71\x7e\x38\x8c\x73\xdf\x66\x4e\x25\xf9\xa4\x68\x8f\xf7\x9b\x85\xfb\x39\x34\xa3\x9d\x74\xad\xef\xdb\xcc\x5b\x24\xbe\xd8\x6f\xd8\xad\xc2\xd1\x38\xef\x1b\x04\x13\xe2\xca\xa8\xb6\xd6\xa3\xd8\x5f\xb7\x78\x02\xf1\x7b\xd3\xda\xf8\x19\xbd\x6e\xeb\x5b\xb4\x7e\xc7\x90\xdb\x8f\xd2\x11\xfc\x20\x75\xe9\x7e\x79\xfb\x47\x7f\xf5\x80\x11\x61\xdd\xd0\xa3\xbd\x5f\x4c\xe7\xfa\xe0\xfb\x2a\x37\x21\x27\xae\xd8\x57\x6f\xef\xa4\x9b\xef\x37\xc6\xd6\x8c\xe6\x10\xbf\x7f\x3f\xaf\xeb\xf8\x30\x09\xaf\x3c\xcd\xf7\xe1\xdd\x9e\x43\xfc\x56\x83\xd9\xa1\xf5\x4f\x8c\x4f\x56\x4b\x81\x46\x8b\x1c\xe5\x2e\xd4\x71\x68\xa8\x20\x75\x90\x2b\xe6\x08\x36\xd8\x85\x06\xe1\x92\xf8\x70\xe8\xdd\x06\xd0\x73\xd6\x86\x16\xfe\x51\x6a\x1c\x09\xc3\xdb\x1a\x35\x25\x25\xd2\x3b\x85\xfe\xef\x9f\xef\x3f\x88\x51\xdc\xbf\xf0\x53\x25\x1d\x4d\x7d\xf3\x71\xd3\x60\x16\xfb\x06\x15\xfe\x25\x3e\x41\xa1\x6f\x4f\x9e\x01\x4e\xb8\xd1\x3b\xb4\xf4\xb9\x3f\xf3\x68\x38\xfb\x78\x9c\x1f\x4e\xef\xd4\x22\x0d\x13\xce\xe2\xd6\x88\xfb\xe5\x42\xb3\xdd\x12\x16\x42\xee\x80\x2b\xe6\x5c\x11\x69\xb6\x9b\x76\x96\x35\x0d\xda\x08\xc2\xa3\x5f\x44\xfe\xa5\x29\xad\xbf\xb6\x53\x6e\x94\x6f\x61\xdf\xcd\xfe\xf8\xfb\xd9\x66\x93\xfb\x99\x81\x0d\xf3\xc0\x77\xd1\x11\xe3\xd6\x32\x2d\xa6\xca\x94\x06\x38\xfa\xcb\x1b\x3d\x99\x98\x16\x29\x5b\xc2\xa2\x55\x20\x45\xef\xb1\x36\xb7\x52\xe1\x09\x40\xe1\x86\xa0\x92\x02\xa7\x46\x4f\x6b\x14\x53\x8f\x27\x4c\xa7\xbd\xbf\xb4\x55\xfe\x2b\xe4\x6e\xb9\x48\x7d\xfc\xe7\xe1\xfb\x71\x80\x49\xed\x5d\x3e\x3a\x96\x35\xdd\x13\x09\x37\x0a\xdc\xe5\xcc\x4b\xab\xd9\x51\xe8\xa9\xf1\xb6\xe7\xf3\x5c\x35\x7b\x62\xc8\xac\x80\xca\x58\xf9\x93\xf7\xa5\x9e\xc2\x32\x2b\xa6\x8e\x7c\x91\x88\xe7\x54\xc3\xbc\x72\x54\x79\x02\x5e\x48\xfa\x89\xfe\x30\xcc\xcc\xe1\x32\xcb\x7e\x97\x43\x85\xb2\xac\x68\x0e\x6f\xb2\xac\xb9\xcb\xfd\xfc\xd1\x13\xf1\x1f\x7c\xff\x8b\xb9\xe7\x57\x66\xba\xed\xb7\x16\xed\x7d\xfa\x2a\x99\x25\x97\xc3\x22\xcc\x70\x8f\x06\xa2\xff\xa3\xbf\xe7\x66\xc8\xed\xcf\x47\xc8\xc7\xee\xd3\xbe\xc2\xd3\x30\xd6\xff\x3b\x00\x00\xff\xff\x1f\xd6\xdf\x77\xec\x0b\x00\x00")

func statsHtmlBytes() ([]byte, error) {
	return bindataRead(
		_statsHtml,
		"stats.html",
	)
}

func statsHtml() (*asset, error) {
	bytes, err := statsHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stats.html", size: 3052, mode: os.FileMode(438), modTime: time.Unix(1510171097, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"stats.html": statsHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"stats.html": &bintree{statsHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

